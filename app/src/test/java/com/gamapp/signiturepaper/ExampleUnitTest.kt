package com.gamapp.signiturepaper

import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import com.gamapp.signaturepaper.roundPath
import com.gamapp.signaturepaper.extensions.v
import com.gamapp.signaturepaper.models.Object
import com.gamapp.signaturepaper.models.Point
import com.gamapp.signaturepaper.models.first
import org.junit.Test

import java.lang.Exception


const val TEST_PATH =
    "(245.9729,247.98047),(249.36925,250.5274),(258.87,254.70813),(268.3194,262.84964),(281.92773,275.80597)," +
            "(301.67133,289.23798),(328.6829,316.65097),(350.7497,346.00815),(373.7858,381.3609),(394.32825,426.1669),(413.55173,475.5135),(428.77686,518.2368),(440.94745,555.08746),(445.06046,585.0832),(450.97778,611.97876),(450.97778,635.0763)," +
            "(450.97778,655.4276),(450.97778,681.3335),(450.97778,702.1395),(450.97778,714.64465),(448.33713,729.3702),(445.98914,738.86426),(443.94888,749.9919),(439.69672,759.5936),(434.6017,770.65485),(430.15237,782.03766),(425.22595,790.71405),(423.08755,794.84564),(418.52145,799.89526),(415.7681,805.96954),(411.55673,813.35175),(407.9663,818.2384),(406.07858,824.5846),(402.13617,827.9414),(396.95358,835.97473),(394.8873,842.9414)," +
            "(390.4833,845.4054),(390.95947,848.50507),(387.26645,852.66376),(384.9939,854.9531),(385.98267,858.9375),(383.2963,861.59937),(381.96167,862.9219),(381.96167,864.91406),(379.06866,872.2858),(379.98413,872.9352),(375.48523,877.9219),(372.62045,888.28735),(367.4389,895.8351),(363.96606,909.2534),(361.0925,921.60114),(355.92038,934.0428)," +
            "(347.84256,949.3202),(342.63223,965.63074),(335.4917,982.55286),(328.34668,1003.5874),(322.152,1028.9565),(315.00104,1058.8842),(310.70953,1082.0702),(305.5369,1107.898),(301.34375,1133.3661),(296.2251,1163.0337),(292.9724,1184.9672),(292.9724,1209.7183),(293.8773,1241.137),(299.0528,1274.7029),(309.31934,1299.8469),(321.065,1319.7723),(336.6909,1344.3994)," +
            "(348.28152,1356.2275),(360.50043,1370.2806),(374.19717,1382.1742),(387.44244,1391.0828),(399.35956,1395.6222),(413.31097,1402.4875),(422.13986,1409.0123),(429.76767,1409.9531),(440.34747,1413.2883),(449.61533,1413.9375),(461.3324,1413.9375),(476.5486,1413.9375),(488.23935,1413.9375),(502.5345,1413.9375)," +
            "(521.6048,1409.5891),(544.5098,1407.2373),(566.5725,1396.9608),(582.6812,1391.0089)," +
            "(595.3518,1386.4615),(613.488,1379.6896),(628.8672,1372.5244),(642.448,1365.5966),(658.5697,1355.0232),(672.6398,1341.2458),(686.3805,1329.641),(697.63855,1318.2717),(706.69855,1301.58),(716.2025,1285.3738),(730.37714,1260.4432),(747.0568,1237.172),(762.1316,1204.1675),(773.3038,1169.1824),(786.8072,1130.6808),(796.49255,1097.6431),(805.3727,1061.0746),(807.95654,1036.6696),(813.0632,1000.1875),(812.9663,973.34436)," +
            "(812.9663,941.9753),(812.9663,915.0311),(812.9663,889.3345),(812.9663,862.7718),(812.9663,839.18835),(811.7849,809.5183),(802.6699,777.58984),(793.9438,739.8944),(792.9602,711.7368),(792.9602,684.3826),(787.94763,647.9275),(783.8005,619.72144),(781.1382,587.31824),(776.9751,560.0021),(776.9751,531.38544),(776.9751,505.1891),(776.9751,474.85114),(776.9751,445.2398)," +
            "(776.9751,413.23712),(779.3183,378.32745),(783.73895,351.15787),(787.8895,330.29242),(794.9712,311.96274),(804.2126,298.09634),(811.2912,287.1105),(818.37134,277.55127),(826.58154,270.69794),(835.8991,263.30377),(844.92975,256.50482),(854.6664,251.50046),(865.2829,245.96631),(874.0472,241.40256)," +
            "(881.7387,238.95703),(887.98096,238.95703),(890.98456,238.95703),(895.14014,235.71329),(898.69434,235.96875),(903.04083,235.96875),(909.2209,234.6655),(912.3892,233.97656),(913.9691,233.97656),(916.1471,233.97656),(917.95715,233.97656)"


fun offsets(): List<Offset> {
    val string = TEST_PATH
    var open = 0
    val items = mutableListOf<String>()
    var current = StringBuilder()
    for (i in string.indices) {
        if (string[i] == '(') {
            open++
            current = StringBuilder()
        } else if (string[i] == ')') {
            open--
            items += current.toString()
        } else
            if (open == 1) {
                current.append(string[i])
            }
    }
    return items.mapNotNull {
        it.toOffset()
    }
}

fun String.toOffset(): Offset? {
    return try {
        val xy = this.split(regex = Regex(","))
        if (xy.size != 2) error("")
        val x = xy[0].toFloat()
        val y = xy[1].toFloat()
        Offset(x, y)
    } catch (e: Exception) {
        null
    }
}

class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        val offsets = offsets()
        var prev: Point? = null
        val points = offsets.map {
            Point(offset = it, previous = prev, next = null).apply {
                prev?.next = this
                prev = this
            }
        }
        val path = Object.Path(
            point = points.last(),
            color = Color.Blue,
            strokeWidth = 8f
        )
        println("offset: ${path.point.offset}")
        println("offset: ${path.point.first().offset}")
        println("**********************")
//        printPointsSize(path.point.first())
//        println(points.size)
        roundPath(path)

        println("************after**********")

        println("offset: ${path.point.offset}")
        println("offset: ${path.point.first().offset}")
//        val point = path.point.first()
//        println("******************************")
//        printPointsSize(point)
//        println("*************************")
//        path.point.apply {
//            val items = mutableListOf<Point>()
//            first().iterateOnNext {
//                items += it
//            }
//            println(items.size)
//        }
    }
}


fun printPointsSize(point:Point){
    var first: Point? = point
    var second: Point?

    while (true) {
        first ?: break
        second = first.next ?: break
        val size = (first.offset v second.offset).size
        println(size)
        first = second
    }
}